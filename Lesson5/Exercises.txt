练习一：
使用列表自行创建一个堆栈类LIFO，支持push、pop、length三种方法
mystack.push(x) 将x压入栈顶
y = mystack.pop() 取出栈顶元素并返回
l = mystack.length() 返回栈内元素总数

如何主动抛出异常?
raise Exception(‘The stack is empty!’)

练习二：
只使用练习一自建的堆栈类，不使用列表等其它结构，只基于堆栈类的push、pop、length三种方法，自行创建一个FIFO队列类，支持push、pop、length三种方法
mystack.push(x) 将x压入队尾
y = mystack.pop() 取出队首元素并返回
l = mystack.length() 返回队列内元素总数

练习三：
继承练习二的队列类，建立一个高级队列类，
增加一个新方法reverse，将队列内全部元素顺序反转;
修改push(x)方法，使得x被连续添加两次；
增加一个to_string()方法，返回一个按顺序依次打印全部队列元素的字符串，例如:”[1,2,3,4,5]”

合作模式练习：
    在完成练习一之后，将你的代码和必要的说明文档交给你的队友用于完成练习二，队友在不查看代码内容的情况下依据文档直接调用你的练习一的类，来完成练习二的类。
    之后，队友将练习二的代码和必要的说明文档交付给你，你基于队友练习二的类，来完成你的练习三。
注意：在练习中，不得修改队友的代码，如果认为队友的代码有问题，以文档方式向队友反馈，由队友排查错误并修改代码。
